{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/spin.js/spin.js","src/CookieManager.js","src/Toolkit.js","src/app.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nvar defaults = {\r\n    lines: 12,\r\n    length: 7,\r\n    width: 5,\r\n    radius: 10,\r\n    scale: 1.0,\r\n    corners: 1,\r\n    color: '#000',\r\n    fadeColor: 'transparent',\r\n    animation: 'spinner-line-fade-default',\r\n    rotate: 0,\r\n    direction: 1,\r\n    speed: 1,\r\n    zIndex: 2e9,\r\n    className: 'spinner',\r\n    top: '50%',\r\n    left: '50%',\r\n    shadow: '0 0 1px transparent',\r\n    position: 'absolute',\r\n};\r\nvar Spinner = /** @class */ (function () {\r\n    function Spinner(opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        this.opts = __assign({}, defaults, opts);\r\n    }\r\n    /**\r\n     * Adds the spinner to the given target element. If this instance is already\r\n     * spinning, it is automatically removed from its previous target by calling\r\n     * stop() internally.\r\n     */\r\n    Spinner.prototype.spin = function (target) {\r\n        this.stop();\r\n        this.el = document.createElement('div');\r\n        this.el.className = this.opts.className;\r\n        this.el.setAttribute('role', 'progressbar');\r\n        css(this.el, {\r\n            position: this.opts.position,\r\n            width: 0,\r\n            zIndex: this.opts.zIndex,\r\n            left: this.opts.left,\r\n            top: this.opts.top,\r\n            transform: \"scale(\" + this.opts.scale + \")\",\r\n        });\r\n        if (target) {\r\n            target.insertBefore(this.el, target.firstChild || null);\r\n        }\r\n        drawLines(this.el, this.opts);\r\n        return this;\r\n    };\r\n    /**\r\n     * Stops and removes the Spinner.\r\n     * Stopped spinners may be reused by calling spin() again.\r\n     */\r\n    Spinner.prototype.stop = function () {\r\n        if (this.el) {\r\n            if (typeof requestAnimationFrame !== 'undefined') {\r\n                cancelAnimationFrame(this.animateId);\r\n            }\r\n            else {\r\n                clearTimeout(this.animateId);\r\n            }\r\n            if (this.el.parentNode) {\r\n                this.el.parentNode.removeChild(this.el);\r\n            }\r\n            this.el = undefined;\r\n        }\r\n        return this;\r\n    };\r\n    return Spinner;\r\n}());\r\nexport { Spinner };\r\n/**\r\n * Sets multiple style properties at once.\r\n */\r\nfunction css(el, props) {\r\n    for (var prop in props) {\r\n        el.style[prop] = props[prop];\r\n    }\r\n    return el;\r\n}\r\n/**\r\n * Returns the line color from the given string or array.\r\n */\r\nfunction getColor(color, idx) {\r\n    return typeof color == 'string' ? color : color[idx % color.length];\r\n}\r\n/**\r\n * Internal method that draws the individual lines.\r\n */\r\nfunction drawLines(el, opts) {\r\n    var borderRadius = (Math.round(opts.corners * opts.width * 500) / 1000) + 'px';\r\n    var shadow = 'none';\r\n    if (opts.shadow === true) {\r\n        shadow = '0 2px 4px #000'; // default shadow\r\n    }\r\n    else if (typeof opts.shadow === 'string') {\r\n        shadow = opts.shadow;\r\n    }\r\n    var shadows = parseBoxShadow(shadow);\r\n    for (var i = 0; i < opts.lines; i++) {\r\n        var degrees = ~~(360 / opts.lines * i + opts.rotate);\r\n        var backgroundLine = css(document.createElement('div'), {\r\n            position: 'absolute',\r\n            top: -opts.width / 2 + \"px\",\r\n            width: (opts.length + opts.width) + 'px',\r\n            height: opts.width + 'px',\r\n            background: getColor(opts.fadeColor, i),\r\n            borderRadius: borderRadius,\r\n            transformOrigin: 'left',\r\n            transform: \"rotate(\" + degrees + \"deg) translateX(\" + opts.radius + \"px)\",\r\n        });\r\n        var delay = i * opts.direction / opts.lines / opts.speed;\r\n        delay -= 1 / opts.speed; // so initial animation state will include trail\r\n        var line = css(document.createElement('div'), {\r\n            width: '100%',\r\n            height: '100%',\r\n            background: getColor(opts.color, i),\r\n            borderRadius: borderRadius,\r\n            boxShadow: normalizeShadow(shadows, degrees),\r\n            animation: 1 / opts.speed + \"s linear \" + delay + \"s infinite \" + opts.animation,\r\n        });\r\n        backgroundLine.appendChild(line);\r\n        el.appendChild(backgroundLine);\r\n    }\r\n}\r\nfunction parseBoxShadow(boxShadow) {\r\n    var regex = /^\\s*([a-zA-Z]+\\s+)?(-?\\d+(\\.\\d+)?)([a-zA-Z]*)\\s+(-?\\d+(\\.\\d+)?)([a-zA-Z]*)(.*)$/;\r\n    var shadows = [];\r\n    for (var _i = 0, _a = boxShadow.split(','); _i < _a.length; _i++) {\r\n        var shadow = _a[_i];\r\n        var matches = shadow.match(regex);\r\n        if (matches === null) {\r\n            continue; // invalid syntax\r\n        }\r\n        var x = +matches[2];\r\n        var y = +matches[5];\r\n        var xUnits = matches[4];\r\n        var yUnits = matches[7];\r\n        if (x === 0 && !xUnits) {\r\n            xUnits = yUnits;\r\n        }\r\n        if (y === 0 && !yUnits) {\r\n            yUnits = xUnits;\r\n        }\r\n        if (xUnits !== yUnits) {\r\n            continue; // units must match to use as coordinates\r\n        }\r\n        shadows.push({\r\n            prefix: matches[1] || '',\r\n            x: x,\r\n            y: y,\r\n            xUnits: xUnits,\r\n            yUnits: yUnits,\r\n            end: matches[8],\r\n        });\r\n    }\r\n    return shadows;\r\n}\r\n/**\r\n * Modify box-shadow x/y offsets to counteract rotation\r\n */\r\nfunction normalizeShadow(shadows, degrees) {\r\n    var normalized = [];\r\n    for (var _i = 0, shadows_1 = shadows; _i < shadows_1.length; _i++) {\r\n        var shadow = shadows_1[_i];\r\n        var xy = convertOffset(shadow.x, shadow.y, degrees);\r\n        normalized.push(shadow.prefix + xy[0] + shadow.xUnits + ' ' + xy[1] + shadow.yUnits + shadow.end);\r\n    }\r\n    return normalized.join(', ');\r\n}\r\nfunction convertOffset(x, y, degrees) {\r\n    var radians = degrees * Math.PI / 180;\r\n    var sin = Math.sin(radians);\r\n    var cos = Math.cos(radians);\r\n    return [\r\n        Math.round((x * cos + y * sin) * 1000) / 1000,\r\n        Math.round((-x * sin + y * cos) * 1000) / 1000,\r\n    ];\r\n}\r\n","class CookieManager {\r\n\r\n    setupCookie(name, value, days) {\r\n        // construct date object - will be today's date by default\r\n        let date = new Date();\r\n        // set time to be today plus how many days specified\r\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n        // concatenate the expires name/value pair with expiry date converted to GMT \r\n        let expires = \"expires=\" + date.toGMTString();\r\n        // assemble cookie\r\n        document.cookie = name + \"=\" + value + \";\" + expires + \";\";\r\n    }\r\n    \r\n    retrieveCookie(name) {\r\n        // return undefined if no cookie stored\r\n        if (document.cookie === \"\") return undefined;\r\n        // value to be returned is undefined by default\r\n        let value;\r\n        // put cookie name/value pairs into an array split on the ; delimiter (since there could be multiple cookies in the file)\r\n        let cookieArray = document.cookie.split(\";\");\r\n        // remove blank spaces from all elements of cookieArray\r\n        cookieArray = cookieArray.map(cookie => cookie.trim());\r\n        // find cookie with name and set value\r\n        cookieArray.forEach(cookie => {\r\n            if (cookie.split(\"=\")[0] == name) {\r\n                value = cookie.split(\"=\")[1];\r\n            }    \r\n        });\r\n        return value;\r\n    }     \r\n}\r\n\r\nexport { CookieManager };","// randomly generates a number between the range of low and high\r\nfunction getRandom(low = 1, high = 10) {\r\n\tlet randomNumber;\r\n\t// calculate random number\r\n    randomNumber = Math.floor(Math.random() * (high - low)) + low;\r\n\t// return random number\r\n\treturn randomNumber;\r\n}\r\n\r\nfunction addKey(functionToCall, myKeyCode = 13) {\r\n    // wire up event listener\r\n    document.addEventListener(\"keydown\", (e) => {\r\n        // is the key released the provided key? Check keyCode via Event object\r\n        if (e.keyCode === myKeyCode) {\r\n            // pressing the enter key will force some browsers to refresh\r\n            // this command stops the event from going further\r\n            e.preventDefault();\r\n            // call provided callback to do everything else that needs to be done\r\n            functionToCall();\r\n            // this also helps the event from propagating in some browsers\r\n            return false;\r\n        }\r\n    });\r\n}\r\n\r\n// ----------------------------------------- challenge solution\r\nfunction getXMLData(retrieveScript, success, failure) {\r\n    // send out AJAX request\r\n    let xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.addEventListener(\"load\", (e) => {\r\n        // has the response been received successfully?\r\n        if (xmlhttp.status == 200) {\r\n            // data retrieved - call success method and pass along XML object response\r\n            success(xmlhttp.responseXML);\r\n        } else {\r\n            failure();\r\n        }\r\n    });\r\n    xmlhttp.addEventListener(\"error\", (e) => {\r\n        failure();\r\n    });\r\n    xmlhttp.open(\"GET\", retrieveScript, true);\r\n    xmlhttp.send();\r\n}\r\n// ------------------------------------------------------------\r\n\r\nexport {getRandom, addKey, getXMLData};","import { Spinner } from \"spin.js\";\r\n// -------------------------------- challenge solution\r\nimport {getXMLData} from \"./Toolkit.js\";\r\n// --------------------------------------------------\r\n// import $ from \"jquery\";\r\n\r\nimport {CookieManager} from \"./CookieManager\";\r\n\r\n// cookieManager object\r\nlet cookieManager = null;\r\nlet lastCity = null;\r\nlet retrieved = 0;\r\nlet retrieveScript;\r\n// xmlHttpRequest object for carrying out AJAX\r\nlet xmlhttp;\r\nlet xmlObject;\r\n// number of cities in XML\r\nlet citiesCount = 0;\r\n\r\nlet cities;\r\nlet option;\r\nlet listItem;\r\nlet loadingOverlay;\r\n\r\n// weather variables\r\nlet conditions;\r\nlet sunrise;\r\nlet sunset;\r\nlet currentTemp;\r\nlet lowTemp;\r\nlet highTemp;\r\nlet humidity;\r\nlet pressure;\r\nlet windDirectionCode;\r\nlet windDirection;\r\nlet windStrength;\r\nlet windSpeed;\r\n\r\n// let hours;\r\n// let minutes;\r\n\r\n// construct Spinner object (spin.js) and add to loading-overlay <div> http://spin.js.org/\r\nlet spinner = new Spinner({ color: '#FFFFFF', lines: 12 }).spin(document.getElementsByClassName(\"loading-overlay\")[0]);\r\n\r\n// ------------------------------------------------------- private methods\r\nfunction populateMe() {\r\n    // populate the dropdown menu\r\n    for (let i = 0; i < citiesCount; i++) {\r\n        // create element for dropdown\r\n        option = document.createElement(\"option\");\r\n        let city = xmlObject.getElementsByTagName(\"name\")[i].textContent;\r\n        let province = xmlObject.getElementsByTagName(\"province\")[i].textContent;\r\n        option.text = city + \", \" + province;\r\n\r\n        // add element to cities as a new option\r\n        cities.add(option, null);\r\n    }\r\n\r\n    cities.addEventListener(\"change\", onChanged);\r\n}\r\n\r\nfunction getWeatherData() {\r\n    conditions = xmlObject.getElementsByTagName(\"weather\")[0].getAttribute(\"value\");\r\n    sunrise = xmlObject.getElementsByTagName(\"sun\")[0].getAttribute(\"rise\");\r\n    sunset = xmlObject.getElementsByTagName(\"sun\")[0].getAttribute(\"set\");\r\n    currentTemp = xmlObject.getElementsByTagName(\"temperature\")[0].getAttribute(\"value\");\r\n    lowTemp = xmlObject.getElementsByTagName(\"temperature\")[0].getAttribute(\"min\");\r\n    highTemp = xmlObject.getElementsByTagName(\"temperature\")[0].getAttribute(\"max\");\r\n    humidity = xmlObject.getElementsByTagName(\"humidity\")[0].getAttribute(\"value\");\r\n    pressure = xmlObject.getElementsByTagName(\"pressure\")[0].getAttribute(\"value\");\r\n    windDirectionCode = xmlObject.getElementsByTagName(\"direction\")[0].getAttribute(\"value\");\r\n    windDirection = xmlObject.getElementsByTagName(\"direction\")[0].getAttribute(\"name\");\r\n    windSpeed = xmlObject.getElementsByTagName(\"speed\")[0].getAttribute(\"value\");\r\n    windStrength = xmlObject.getElementsByTagName(\"speed\")[0].getAttribute(\"name\");\r\n    // console.log(windDirectionCode.toLowerCase());\r\n}\r\n\r\nfunction convertWeatherData() {\r\n    sunrise = new Date(sunrise + \"Z\");\r\n    sunset = new Date(sunset + \"Z\");\r\n    let month = sunrise.getMonth() + 1;\r\n    if (month < 10) {\r\n        month = \"0\" + month;\r\n    }\r\n    let day = sunrise.getDate();\r\n    // console.log(day);\r\n    if (day < 10) {\r\n        day = \"0\" + day;\r\n    }\r\n    let hours = sunrise.getHours();\r\n    let minutes = sunrise.getMinutes();\r\n    if (minutes < 10) {\r\n        minutes = \"0\" + minutes;\r\n    }\r\n    let year = sunrise.getFullYear();\r\n    sunrise = month + \"/\" + day + \"/\" + year + \"  \" + hours + \":\" + minutes;\r\n    month = sunset.getMonth() + 1;\r\n    if (month < 10) {\r\n        month = \"0\" + month;\r\n    }\r\n    day = sunset.getDate();\r\n    if (day < 10) {\r\n        day = \"0\" + day;\r\n    }\r\n    hours = sunset.getHours();\r\n    minutes = sunset.getMinutes();\r\n    if (minutes < 10) {\r\n        minutes = \"0\" + minutes;\r\n    }\r\n    year = sunset.getFullYear();\r\n    sunset = month + \"/\" + day + \"/\" + year + \"  \" + hours + \":\" + minutes;\r\n    currentTemp -= 273.15;\r\n    lowTemp -= 273.15;\r\n    highTemp -= 273.15;\r\n}\r\n\r\nfunction displayData() {\r\n\r\n    let code = xmlObject.getElementsByTagName(\"weather\")[0].getAttribute(\"number\");\r\n    document.getElementsByClassName(\"info__icon\")[0].innerHTML = `<i class=\"wi wi-owm-${code}\"></i>`;\r\n    document.getElementsByClassName(\"info__conditions\")[0].innerHTML = conditions;\r\n    document.getElementsByClassName(\"info__city\")[0].innerHTML = listItem;\r\n    document.getElementsByClassName(\"weather__sun__rise\")[0].innerHTML = `<i class=\"wi wi-sunrise\"></i>&nbsp;${sunrise}`;\r\n    document.getElementsByClassName(\"weather__sun__set\")[0].innerHTML = `<i class=\"wi wi-sunset\"></i>&nbsp;${sunset}`;\r\n    document.getElementsByClassName(\"weather__temp__current\")[0].innerHTML = `${Math.round(currentTemp)}<i class=\"wi wi-celsius\"></i>&nbsp;&nbsp;Current`;\r\n    document.getElementsByClassName(\"weather__temp__low\")[0].innerHTML = `${Math.round(lowTemp)}<i class=\"wi wi-celsius\"></i>&nbsp;&nbsp;Low`;\r\n    document.getElementsByClassName(\"weather__temp__high\")[0].innerHTML = `${Math.round(highTemp)}<i class=\"wi wi-celsius\"></i>&nbsp;&nbsp;High`;\r\n    document.getElementsByClassName(\"weather__humidity__value\")[0].innerHTML = `${humidity} %`;\r\n    document.getElementsByClassName(\"weather__pressure__value\")[0].innerHTML = `${pressure} hPa`;\r\n    document.getElementsByClassName(\"weather__wind__icon\")[0].innerHTML = `<i class=\"wi wi-wind towards-${windDirectionCode}-deg\"></i><b>&nbsp;&nbsp;Wind</b>`;\r\n    document.getElementsByClassName(\"weather__wind__direction\")[0].innerHTML = `${windDirection} wind`;\r\n    document.getElementsByClassName(\"weather__wind__strength\")[0].innerHTML = windStrength;\r\n    document.getElementsByClassName(\"weather__wind__speed\")[0].innerHTML = `${windSpeed} km/h speed`;\r\n   \r\n}\r\n\r\n// ------------------------------------------------------- event handlers\r\nfunction onCityDataLoaded(result) {\r\n\r\n    // grab the XML response\r\n    xmlObject = result;\r\n    loadingOverlay.style.display = \"none\";\r\n    document.getElementsByClassName(\"weather\")[0].style.display = \"flex\";\r\n    document.querySelector(\".weather\").style.opacity = 1;\r\n\r\n    getWeatherData();\r\n    convertWeatherData();\r\n    displayData();\r\n}\r\n\r\nfunction onLoaded(result) {  \r\n    // grab the XML response\r\n    xmlObject = result;\r\n \r\n    citiesCount = xmlObject.getElementsByTagName(\"city\").length;\r\n    if (citiesCount > 0) {\r\n        populateMe();\r\n        listItem = cookieManager.retrieveCookie(\"lastCity\");\r\n        if (listItem != undefined) {\r\n            cities.value = listItem;\r\n            console.log(\"after retrieve: \" + listItem);\r\n        }\r\n\r\n        onChanged();\r\n        loadingOverlay.style.display = \"none\";\r\n    }\r\n}\r\n\r\nfunction onCityNotFound(e) {\r\n    document.getElementsByClassName(\"info__city\")[0].innerHTML = \"City not found\".fontcolor(\"red\").italics();\r\n    document.getElementsByClassName(\"weather\")[0].style.display = \"none\";\r\n}\r\n\r\nfunction onError(e) {\r\n    console.log(\"*** Error has occured during AJAX data retrieval\");\r\n}\r\n\r\nfunction onChanged(e) {\r\n    console.log(\"in onChanged: \" + listItem);\r\n\r\n    // reference to option in cities\r\n    listItem = cities.selectedOptions[0];\r\n    console.log(\"in onChanged textContent: \" + listItem.textContent);\r\n    lastCity = listItem.textContent;\r\n    listItem = lastCity;\r\n    saveData();\r\n\r\n\r\n    let citySplit = listItem.split(\",\");\r\n    // console.log(listItem.textContent);\r\n    console.log(citySplit[0]);\r\n    retrieveScript = `http://api.openweathermap.org/data/2.5/weather?q=${citySplit[0]},CA&mode=xml&appid=6761afb1468ce2fec9c0b3c67ee37aa2`;\r\n    document.querySelector(\".weather\").style.opacity = 0.2;\r\n\r\n    getXMLData(retrieveScript, onCityDataLoaded, onCityNotFound);\r\n}\r\n\r\nfunction saveData() {\r\n    // write current won and lost count to cookie for future games\r\n    cookieManager.setupCookie(\"lastCity\", lastCity, 365);\r\n    // cookieManager.setupCookie(\"losts\", lost, 365);\r\n}\r\n\r\n// ------------------------------------------------------- private methods\r\nfunction main() {\r\n\r\n    // construct cookieManager\r\n    cookieManager = new CookieManager();\r\n\r\n\r\n\r\n    // setup references to controls\r\n    retrieveScript = \"cities.xml\";\r\n    cities = document.getElementById(\"cities\");\r\n    loadingOverlay = document.getElementsByClassName(\"loading-overlay\")[0];\r\n\r\n    // send out AJAX request\r\n    getXMLData(retrieveScript, onLoaded, onError);\r\n    // ----------------------------------------------------------\r\n}\r\n\r\nmain();"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvc3Bpbi5qcy9zcGluLmpzIiwic3JjL0Nvb2tpZU1hbmFnZXIuanMiLCJzcmMvVG9vbGtpdC5qcyIsInNyYy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQ0FBLElBQUksV0FBWSxhQUFRLFVBQUssUUFBZCxJQUEyQixPQUFPLE1BQWxDLElBQTRDLFVBQVMsQ0FBVCxFQUFZO0FBQ25FLFNBQUssSUFBSSxDQUFKLEVBQU8sSUFBSSxDQUFYLEVBQWMsSUFBSSxVQUFVLE1BQWpDLEVBQXlDLElBQUksQ0FBN0MsRUFBZ0QsR0FBaEQsRUFBcUQ7QUFDakQsWUFBSSxVQUFVLENBQVYsQ0FBSjtBQUNBLGFBQUssSUFBSSxDQUFULElBQWMsQ0FBZDtBQUFpQixnQkFBSSxPQUFPLFNBQVAsQ0FBaUIsY0FBakIsQ0FBZ0MsSUFBaEMsQ0FBcUMsQ0FBckMsRUFBd0MsQ0FBeEMsQ0FBSixFQUNiLEVBQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixDQUFQO0FBREo7QUFFSDtBQUNELFdBQU8sQ0FBUDtBQUNILENBUEQ7QUFRQSxJQUFJLFdBQVc7QUFDWCxXQUFPLEVBREk7QUFFWCxZQUFRLENBRkc7QUFHWCxXQUFPLENBSEk7QUFJWCxZQUFRLEVBSkc7QUFLWCxXQUFPLEdBTEk7QUFNWCxhQUFTLENBTkU7QUFPWCxXQUFPLE1BUEk7QUFRWCxlQUFXLGFBUkE7QUFTWCxlQUFXLDJCQVRBO0FBVVgsWUFBUSxDQVZHO0FBV1gsZUFBVyxDQVhBO0FBWVgsV0FBTyxDQVpJO0FBYVgsWUFBUSxHQWJHO0FBY1gsZUFBVyxTQWRBO0FBZVgsU0FBSyxLQWZNO0FBZ0JYLFVBQU0sS0FoQks7QUFpQlgsWUFBUSxxQkFqQkc7QUFrQlgsY0FBVTtBQWxCQyxDQUFmO0FBb0JBLElBQUksVUFBVSxhQUFlLFlBQVk7QUFDckMsYUFBUyxPQUFULENBQWlCLElBQWpCLEVBQXVC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QUFFRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn07XHJcbnZhciBkZWZhdWx0cyA9IHtcclxuICAgIGxpbmVzOiAxMixcclxuICAgIGxlbmd0aDogNyxcclxuICAgIHdpZHRoOiA1LFxyXG4gICAgcmFkaXVzOiAxMCxcclxuICAgIHNjYWxlOiAxLjAsXHJcbiAgICBjb3JuZXJzOiAxLFxyXG4gICAgY29sb3I6ICcjMDAwJyxcclxuICAgIGZhZGVDb2xvcjogJ3RyYW5zcGFyZW50JyxcclxuICAgIGFuaW1hdGlvbjogJ3NwaW5uZXItbGluZS1mYWRlLWRlZmF1bHQnLFxyXG4gICAgcm90YXRlOiAwLFxyXG4gICAgZGlyZWN0aW9uOiAxLFxyXG4gICAgc3BlZWQ6IDEsXHJcbiAgICB6SW5kZXg6IDJlOSxcclxuICAgIGNsYXNzTmFtZTogJ3NwaW5uZXInLFxyXG4gICAgdG9wOiAnNTAlJyxcclxuICAgIGxlZnQ6ICc1MCUnLFxyXG4gICAgc2hhZG93OiAnMCAwIDFweCB0cmFuc3BhcmVudCcsXHJcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxufTtcclxudmFyIFNwaW5uZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTcGlubmVyKG9wdHMpIHtcclxuICAgICAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7fTsgfVxyXG4gICAgICAgIHRoaXMub3B0cyA9IF9fYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0cyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIHNwaW5uZXIgdG8gdGhlIGdpdmVuIHRhcmdldCBlbGVtZW50LiBJZiB0aGlzIGluc3RhbmNlIGlzIGFscmVhZHlcclxuICAgICAqIHNwaW5uaW5nLCBpdCBpcyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSBpdHMgcHJldmlvdXMgdGFyZ2V0IGJ5IGNhbGxpbmdcclxuICAgICAqIHN0b3AoKSBpbnRlcm5hbGx5LlxyXG4gICAgICovXHJcbiAgICBTcGlubmVyLnByb3RvdHlwZS5zcGluID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLmVsLmNsYXNzTmFtZSA9IHRoaXMub3B0cy5jbGFzc05hbWU7XHJcbiAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAncHJvZ3Jlc3NiYXInKTtcclxuICAgICAgICBjc3ModGhpcy5lbCwge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogdGhpcy5vcHRzLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICAgICAgekluZGV4OiB0aGlzLm9wdHMuekluZGV4LFxyXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLm9wdHMubGVmdCxcclxuICAgICAgICAgICAgdG9wOiB0aGlzLm9wdHMudG9wLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFwic2NhbGUoXCIgKyB0aGlzLm9wdHMuc2NhbGUgKyBcIilcIixcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUodGhpcy5lbCwgdGFyZ2V0LmZpcnN0Q2hpbGQgfHwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyYXdMaW5lcyh0aGlzLmVsLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RvcHMgYW5kIHJlbW92ZXMgdGhlIFNwaW5uZXIuXHJcbiAgICAgKiBTdG9wcGVkIHNwaW5uZXJzIG1heSBiZSByZXVzZWQgYnkgY2FsbGluZyBzcGluKCkgYWdhaW4uXHJcbiAgICAgKi9cclxuICAgIFNwaW5uZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZWwpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGVJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5hbmltYXRlSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVsLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmVsID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICByZXR1cm4gU3Bpbm5lcjtcclxufSgpKTtcclxuZXhwb3J0IHsgU3Bpbm5lciB9O1xyXG4vKipcclxuICogU2V0cyBtdWx0aXBsZSBzdHlsZSBwcm9wZXJ0aWVzIGF0IG9uY2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjc3MoZWwsIHByb3BzKSB7XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKSB7XHJcbiAgICAgICAgZWwuc3R5bGVbcHJvcF0gPSBwcm9wc1twcm9wXTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbDtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgbGluZSBjb2xvciBmcm9tIHRoZSBnaXZlbiBzdHJpbmcgb3IgYXJyYXkuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRDb2xvcihjb2xvciwgaWR4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGNvbG9yID09ICdzdHJpbmcnID8gY29sb3IgOiBjb2xvcltpZHggJSBjb2xvci5sZW5ndGhdO1xyXG59XHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBkcmF3cyB0aGUgaW5kaXZpZHVhbCBsaW5lcy5cclxuICovXHJcbmZ1bmN0aW9uIGRyYXdMaW5lcyhlbCwgb3B0cykge1xyXG4gICAgdmFyIGJvcmRlclJhZGl1cyA9IChNYXRoLnJvdW5kKG9wdHMuY29ybmVycyAqIG9wdHMud2lkdGggKiA1MDApIC8gMTAwMCkgKyAncHgnO1xyXG4gICAgdmFyIHNoYWRvdyA9ICdub25lJztcclxuICAgIGlmIChvcHRzLnNoYWRvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHNoYWRvdyA9ICcwIDJweCA0cHggIzAwMCc7IC8vIGRlZmF1bHQgc2hhZG93XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0cy5zaGFkb3cgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgc2hhZG93ID0gb3B0cy5zaGFkb3c7XHJcbiAgICB9XHJcbiAgICB2YXIgc2hhZG93cyA9IHBhcnNlQm94U2hhZG93KHNoYWRvdyk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdHMubGluZXM7IGkrKykge1xyXG4gICAgICAgIHZhciBkZWdyZWVzID0gfn4oMzYwIC8gb3B0cy5saW5lcyAqIGkgKyBvcHRzLnJvdGF0ZSk7XHJcbiAgICAgICAgdmFyIGJhY2tncm91bmRMaW5lID0gY3NzKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICB0b3A6IC1vcHRzLndpZHRoIC8gMiArIFwicHhcIixcclxuICAgICAgICAgICAgd2lkdGg6IChvcHRzLmxlbmd0aCArIG9wdHMud2lkdGgpICsgJ3B4JyxcclxuICAgICAgICAgICAgaGVpZ2h0OiBvcHRzLndpZHRoICsgJ3B4JyxcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogZ2V0Q29sb3Iob3B0cy5mYWRlQ29sb3IsIGkpLFxyXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCcsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoXCIgKyBkZWdyZWVzICsgXCJkZWcpIHRyYW5zbGF0ZVgoXCIgKyBvcHRzLnJhZGl1cyArIFwicHgpXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGRlbGF5ID0gaSAqIG9wdHMuZGlyZWN0aW9uIC8gb3B0cy5saW5lcyAvIG9wdHMuc3BlZWQ7XHJcbiAgICAgICAgZGVsYXkgLT0gMSAvIG9wdHMuc3BlZWQ7IC8vIHNvIGluaXRpYWwgYW5pbWF0aW9uIHN0YXRlIHdpbGwgaW5jbHVkZSB0cmFpbFxyXG4gICAgICAgIHZhciBsaW5lID0gY3NzKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBnZXRDb2xvcihvcHRzLmNvbG9yLCBpKSxcclxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMsXHJcbiAgICAgICAgICAgIGJveFNoYWRvdzogbm9ybWFsaXplU2hhZG93KHNoYWRvd3MsIGRlZ3JlZXMpLFxyXG4gICAgICAgICAgICBhbmltYXRpb246IDEgLyBvcHRzLnNwZWVkICsgXCJzIGxpbmVhciBcIiArIGRlbGF5ICsgXCJzIGluZmluaXRlIFwiICsgb3B0cy5hbmltYXRpb24sXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmFja2dyb3VuZExpbmUuYXBwZW5kQ2hpbGQobGluZSk7XHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoYmFja2dyb3VuZExpbmUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBhcnNlQm94U2hhZG93KGJveFNoYWRvdykge1xyXG4gICAgdmFyIHJlZ2V4ID0gL15cXHMqKFthLXpBLVpdK1xccyspPygtP1xcZCsoXFwuXFxkKyk/KShbYS16QS1aXSopXFxzKygtP1xcZCsoXFwuXFxkKyk/KShbYS16QS1aXSopKC4qKSQvO1xyXG4gICAgdmFyIHNoYWRvd3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBib3hTaGFkb3cuc3BsaXQoJywnKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgc2hhZG93ID0gX2FbX2ldO1xyXG4gICAgICAgIHZhciBtYXRjaGVzID0gc2hhZG93Lm1hdGNoKHJlZ2V4KTtcclxuICAgICAgICBpZiAobWF0Y2hlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTsgLy8gaW52YWxpZCBzeW50YXhcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHggPSArbWF0Y2hlc1syXTtcclxuICAgICAgICB2YXIgeSA9ICttYXRjaGVzWzVdO1xyXG4gICAgICAgIHZhciB4VW5pdHMgPSBtYXRjaGVzWzRdO1xyXG4gICAgICAgIHZhciB5VW5pdHMgPSBtYXRjaGVzWzddO1xyXG4gICAgICAgIGlmICh4ID09PSAwICYmICF4VW5pdHMpIHtcclxuICAgICAgICAgICAgeFVuaXRzID0geVVuaXRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeSA9PT0gMCAmJiAheVVuaXRzKSB7XHJcbiAgICAgICAgICAgIHlVbml0cyA9IHhVbml0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHhVbml0cyAhPT0geVVuaXRzKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyB1bml0cyBtdXN0IG1hdGNoIHRvIHVzZSBhcyBjb29yZGluYXRlc1xyXG4gICAgICAgIH1cclxuICAgICAgICBzaGFkb3dzLnB1c2goe1xyXG4gICAgICAgICAgICBwcmVmaXg6IG1hdGNoZXNbMV0gfHwgJycsXHJcbiAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgIHhVbml0czogeFVuaXRzLFxyXG4gICAgICAgICAgICB5VW5pdHM6IHlVbml0cyxcclxuICAgICAgICAgICAgZW5kOiBtYXRjaGVzWzhdLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNoYWRvd3M7XHJcbn1cclxuLyoqXHJcbiAqIE1vZGlmeSBib3gtc2hhZG93IHgveSBvZmZzZXRzIHRvIGNvdW50ZXJhY3Qgcm90YXRpb25cclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVNoYWRvdyhzaGFkb3dzLCBkZWdyZWVzKSB7XHJcbiAgICB2YXIgbm9ybWFsaXplZCA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBzaGFkb3dzXzEgPSBzaGFkb3dzOyBfaSA8IHNoYWRvd3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgc2hhZG93ID0gc2hhZG93c18xW19pXTtcclxuICAgICAgICB2YXIgeHkgPSBjb252ZXJ0T2Zmc2V0KHNoYWRvdy54LCBzaGFkb3cueSwgZGVncmVlcyk7XHJcbiAgICAgICAgbm9ybWFsaXplZC5wdXNoKHNoYWRvdy5wcmVmaXggKyB4eVswXSArIHNoYWRvdy54VW5pdHMgKyAnICcgKyB4eVsxXSArIHNoYWRvdy55VW5pdHMgKyBzaGFkb3cuZW5kKTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVkLmpvaW4oJywgJyk7XHJcbn1cclxuZnVuY3Rpb24gY29udmVydE9mZnNldCh4LCB5LCBkZWdyZWVzKSB7XHJcbiAgICB2YXIgcmFkaWFucyA9IGRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgdmFyIHNpbiA9IE1hdGguc2luKHJhZGlhbnMpO1xyXG4gICAgdmFyIGNvcyA9IE1hdGguY29zKHJhZGlhbnMpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBNYXRoLnJvdW5kKCh4ICogY29zICsgeSAqIHNpbikgKiAxMDAwKSAvIDEwMDAsXHJcbiAgICAgICAgTWF0aC5yb3VuZCgoLXggKiBzaW4gKyB5ICogY29zKSAqIDEwMDApIC8gMTAwMCxcclxuICAgIF07XHJcbn1cclxuIiwiY2xhc3MgQ29va2llTWFuYWdlciB7XHJcblxyXG4gICAgc2V0dXBDb29raWUobmFtZSwgdmFsdWUsIGRheXMpIHtcclxuICAgICAgICAvLyBjb25zdHJ1Y3QgZGF0ZSBvYmplY3QgLSB3aWxsIGJlIHRvZGF5J3MgZGF0ZSBieSBkZWZhdWx0XHJcbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIC8vIHNldCB0aW1lIHRvIGJlIHRvZGF5IHBsdXMgaG93IG1hbnkgZGF5cyBzcGVjaWZpZWRcclxuICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoZGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApKTtcclxuICAgICAgICAvLyBjb25jYXRlbmF0ZSB0aGUgZXhwaXJlcyBuYW1lL3ZhbHVlIHBhaXIgd2l0aCBleHBpcnkgZGF0ZSBjb252ZXJ0ZWQgdG8gR01UIFxyXG4gICAgICAgIGxldCBleHBpcmVzID0gXCJleHBpcmVzPVwiICsgZGF0ZS50b0dNVFN0cmluZygpO1xyXG4gICAgICAgIC8vIGFzc2VtYmxlIGNvb2tpZVxyXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyBcIj1cIiArIHZhbHVlICsgXCI7XCIgKyBleHBpcmVzICsgXCI7XCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHJpZXZlQ29va2llKG5hbWUpIHtcclxuICAgICAgICAvLyByZXR1cm4gdW5kZWZpbmVkIGlmIG5vIGNvb2tpZSBzdG9yZWRcclxuICAgICAgICBpZiAoZG9jdW1lbnQuY29va2llID09PSBcIlwiKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIC8vIHZhbHVlIHRvIGJlIHJldHVybmVkIGlzIHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcbiAgICAgICAgbGV0IHZhbHVlO1xyXG4gICAgICAgIC8vIHB1dCBjb29raWUgbmFtZS92YWx1ZSBwYWlycyBpbnRvIGFuIGFycmF5IHNwbGl0IG9uIHRoZSA7IGRlbGltaXRlciAoc2luY2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgY29va2llcyBpbiB0aGUgZmlsZSlcclxuICAgICAgICBsZXQgY29va2llQXJyYXkgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoXCI7XCIpO1xyXG4gICAgICAgIC8vIHJlbW92ZSBibGFuayBzcGFjZXMgZnJvbSBhbGwgZWxlbWVudHMgb2YgY29va2llQXJyYXlcclxuICAgICAgICBjb29raWVBcnJheSA9IGNvb2tpZUFycmF5Lm1hcChjb29raWUgPT4gY29va2llLnRyaW0oKSk7XHJcbiAgICAgICAgLy8gZmluZCBjb29raWUgd2l0aCBuYW1lIGFuZCBzZXQgdmFsdWVcclxuICAgICAgICBjb29raWVBcnJheS5mb3JFYWNoKGNvb2tpZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjb29raWUuc3BsaXQoXCI9XCIpWzBdID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gY29va2llLnNwbGl0KFwiPVwiKVsxXTtcclxuICAgICAgICAgICAgfSAgICBcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9ICAgICBcclxufVxyXG5cclxuZXhwb3J0IHsgQ29va2llTWFuYWdlciB9OyIsIi8vIHJhbmRvbWx5IGdlbmVyYXRlcyBhIG51bWJlciBiZXR3ZWVuIHRoZSByYW5nZSBvZiBsb3cgYW5kIGhpZ2hcclxuZnVuY3Rpb24gZ2V0UmFuZG9tKGxvdyA9IDEsIGhpZ2ggPSAxMCkge1xyXG5cdGxldCByYW5kb21OdW1iZXI7XHJcblx0Ly8gY2FsY3VsYXRlIHJhbmRvbSBudW1iZXJcclxuICAgIHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkgKyBsb3c7XHJcblx0Ly8gcmV0dXJuIHJhbmRvbSBudW1iZXJcclxuXHRyZXR1cm4gcmFuZG9tTnVtYmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRLZXkoZnVuY3Rpb25Ub0NhbGwsIG15S2V5Q29kZSA9IDEzKSB7XHJcbiAgICAvLyB3aXJlIHVwIGV2ZW50IGxpc3RlbmVyXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xyXG4gICAgICAgIC8vIGlzIHRoZSBrZXkgcmVsZWFzZWQgdGhlIHByb3ZpZGVkIGtleT8gQ2hlY2sga2V5Q29kZSB2aWEgRXZlbnQgb2JqZWN0XHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gbXlLZXlDb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIHByZXNzaW5nIHRoZSBlbnRlciBrZXkgd2lsbCBmb3JjZSBzb21lIGJyb3dzZXJzIHRvIHJlZnJlc2hcclxuICAgICAgICAgICAgLy8gdGhpcyBjb21tYW5kIHN0b3BzIHRoZSBldmVudCBmcm9tIGdvaW5nIGZ1cnRoZXJcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAvLyBjYWxsIHByb3ZpZGVkIGNhbGxiYWNrIHRvIGRvIGV2ZXJ5dGhpbmcgZWxzZSB0aGF0IG5lZWRzIHRvIGJlIGRvbmVcclxuICAgICAgICAgICAgZnVuY3Rpb25Ub0NhbGwoKTtcclxuICAgICAgICAgICAgLy8gdGhpcyBhbHNvIGhlbHBzIHRoZSBldmVudCBmcm9tIHByb3BhZ2F0aW5nIGluIHNvbWUgYnJvd3NlcnNcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBjaGFsbGVuZ2Ugc29sdXRpb25cclxuZnVuY3Rpb24gZ2V0WE1MRGF0YShyZXRyaWV2ZVNjcmlwdCwgc3VjY2VzcywgZmFpbHVyZSkge1xyXG4gICAgLy8gc2VuZCBvdXQgQUpBWCByZXF1ZXN0XHJcbiAgICBsZXQgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgeG1saHR0cC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoZSkgPT4ge1xyXG4gICAgICAgIC8vIGhhcyB0aGUgcmVzcG9uc2UgYmVlbiByZWNlaXZlZCBzdWNjZXNzZnVsbHk/XHJcbiAgICAgICAgaWYgKHhtbGh0dHAuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAvLyBkYXRhIHJldHJpZXZlZCAtIGNhbGwgc3VjY2VzcyBtZXRob2QgYW5kIHBhc3MgYWxvbmcgWE1MIG9iamVjdCByZXNwb25zZVxyXG4gICAgICAgICAgICBzdWNjZXNzKHhtbGh0dHAucmVzcG9uc2VYTUwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZhaWx1cmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHhtbGh0dHAuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChlKSA9PiB7XHJcbiAgICAgICAgZmFpbHVyZSgpO1xyXG4gICAgfSk7XHJcbiAgICB4bWxodHRwLm9wZW4oXCJHRVRcIiwgcmV0cmlldmVTY3JpcHQsIHRydWUpO1xyXG4gICAgeG1saHR0cC5zZW5kKCk7XHJcbn1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5leHBvcnQge2dldFJhbmRvbSwgYWRkS2V5LCBnZXRYTUxEYXRhfTsiLCJpbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcInNwaW4uanNcIjtcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gY2hhbGxlbmdlIHNvbHV0aW9uXHJcbmltcG9ydCB7Z2V0WE1MRGF0YX0gZnJvbSBcIi4vVG9vbGtpdC5qc1wiO1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBpbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XHJcblxyXG5pbXBvcnQge0Nvb2tpZU1hbmFnZXJ9IGZyb20gXCIuL0Nvb2tpZU1hbmFnZXJcIjtcclxuXHJcbi8vIGNvb2tpZU1hbmFnZXIgb2JqZWN0XHJcbmxldCBjb29raWVNYW5hZ2VyID0gbnVsbDtcclxubGV0IGxhc3RDaXR5ID0gbnVsbDtcclxubGV0IHJldHJpZXZlZCA9IDA7XHJcbmxldCByZXRyaWV2ZVNjcmlwdDtcclxuLy8geG1sSHR0cFJlcXVlc3Qgb2JqZWN0IGZvciBjYXJyeWluZyBvdXQgQUpBWFxyXG5sZXQgeG1saHR0cDtcclxubGV0IHhtbE9iamVjdDtcclxuLy8gbnVtYmVyIG9mIGNpdGllcyBpbiBYTUxcclxubGV0IGNpdGllc0NvdW50ID0gMDtcclxuXHJcbmxldCBjaXRpZXM7XHJcbmxldCBvcHRpb247XHJcbmxldCBsaXN0SXRlbTtcclxubGV0IGxvYWRpbmdPdmVybGF5O1xyXG5cclxuLy8gd2VhdGhlciB2YXJpYWJsZXNcclxubGV0IGNvbmRpdGlvbnM7XHJcbmxldCBzdW5yaXNlO1xyXG5sZXQgc3Vuc2V0O1xyXG5sZXQgY3VycmVudFRlbXA7XHJcbmxldCBsb3dUZW1wO1xyXG5sZXQgaGlnaFRlbXA7XHJcbmxldCBodW1pZGl0eTtcclxubGV0IHByZXNzdXJlO1xyXG5sZXQgd2luZERpcmVjdGlvbkNvZGU7XHJcbmxldCB3aW5kRGlyZWN0aW9uO1xyXG5sZXQgd2luZFN0cmVuZ3RoO1xyXG5sZXQgd2luZFNwZWVkO1xyXG5cclxuLy8gbGV0IGhvdXJzO1xyXG4vLyBsZXQgbWludXRlcztcclxuXHJcbi8vIGNvbnN0cnVjdCBTcGlubmVyIG9iamVjdCAoc3Bpbi5qcykgYW5kIGFkZCB0byBsb2FkaW5nLW92ZXJsYXkgPGRpdj4gaHR0cDovL3NwaW4uanMub3JnL1xyXG5sZXQgc3Bpbm5lciA9IG5ldyBTcGlubmVyKHsgY29sb3I6ICcjRkZGRkZGJywgbGluZXM6IDEyIH0pLnNwaW4oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImxvYWRpbmctb3ZlcmxheVwiKVswXSk7XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHByaXZhdGUgbWV0aG9kc1xyXG5mdW5jdGlvbiBwb3B1bGF0ZU1lKCkge1xyXG4gICAgLy8gcG9wdWxhdGUgdGhlIGRyb3Bkb3duIG1lbnVcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2l0aWVzQ291bnQ7IGkrKykge1xyXG4gICAgICAgIC8vIGNyZWF0ZSBlbGVtZW50IGZvciBkcm9wZG93blxyXG4gICAgICAgIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XHJcbiAgICAgICAgbGV0IGNpdHkgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJuYW1lXCIpW2ldLnRleHRDb250ZW50O1xyXG4gICAgICAgIGxldCBwcm92aW5jZSA9IHhtbE9iamVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInByb3ZpbmNlXCIpW2ldLnRleHRDb250ZW50O1xyXG4gICAgICAgIG9wdGlvbi50ZXh0ID0gY2l0eSArIFwiLCBcIiArIHByb3ZpbmNlO1xyXG5cclxuICAgICAgICAvLyBhZGQgZWxlbWVudCB0byBjaXRpZXMgYXMgYSBuZXcgb3B0aW9uXHJcbiAgICAgICAgY2l0aWVzLmFkZChvcHRpb24sIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNpdGllcy5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIG9uQ2hhbmdlZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFdlYXRoZXJEYXRhKCkge1xyXG4gICAgY29uZGl0aW9ucyA9IHhtbE9iamVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIndlYXRoZXJcIilbMF0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XHJcbiAgICBzdW5yaXNlID0geG1sT2JqZWN0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3VuXCIpWzBdLmdldEF0dHJpYnV0ZShcInJpc2VcIik7XHJcbiAgICBzdW5zZXQgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdW5cIilbMF0uZ2V0QXR0cmlidXRlKFwic2V0XCIpO1xyXG4gICAgY3VycmVudFRlbXAgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZW1wZXJhdHVyZVwiKVswXS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcclxuICAgIGxvd1RlbXAgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZW1wZXJhdHVyZVwiKVswXS5nZXRBdHRyaWJ1dGUoXCJtaW5cIik7XHJcbiAgICBoaWdoVGVtcCA9IHhtbE9iamVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRlbXBlcmF0dXJlXCIpWzBdLmdldEF0dHJpYnV0ZShcIm1heFwiKTtcclxuICAgIGh1bWlkaXR5ID0geG1sT2JqZWN0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHVtaWRpdHlcIilbMF0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XHJcbiAgICBwcmVzc3VyZSA9IHhtbE9iamVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInByZXNzdXJlXCIpWzBdLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xyXG4gICAgd2luZERpcmVjdGlvbkNvZGUgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXJlY3Rpb25cIilbMF0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XHJcbiAgICB3aW5kRGlyZWN0aW9uID0geG1sT2JqZWN0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGlyZWN0aW9uXCIpWzBdLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XHJcbiAgICB3aW5kU3BlZWQgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGVlZFwiKVswXS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcclxuICAgIHdpbmRTdHJlbmd0aCA9IHhtbE9iamVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNwZWVkXCIpWzBdLmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XHJcbiAgICAvLyBjb25zb2xlLmxvZyh3aW5kRGlyZWN0aW9uQ29kZS50b0xvd2VyQ2FzZSgpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29udmVydFdlYXRoZXJEYXRhKCkge1xyXG4gICAgc3VucmlzZSA9IG5ldyBEYXRlKHN1bnJpc2UgKyBcIlpcIik7XHJcbiAgICBzdW5zZXQgPSBuZXcgRGF0ZShzdW5zZXQgKyBcIlpcIik7XHJcbiAgICBsZXQgbW9udGggPSBzdW5yaXNlLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgaWYgKG1vbnRoIDwgMTApIHtcclxuICAgICAgICBtb250aCA9IFwiMFwiICsgbW9udGg7XHJcbiAgICB9XHJcbiAgICBsZXQgZGF5ID0gc3VucmlzZS5nZXREYXRlKCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXkpO1xyXG4gICAgaWYgKGRheSA8IDEwKSB7XHJcbiAgICAgICAgZGF5ID0gXCIwXCIgKyBkYXk7XHJcbiAgICB9XHJcbiAgICBsZXQgaG91cnMgPSBzdW5yaXNlLmdldEhvdXJzKCk7XHJcbiAgICBsZXQgbWludXRlcyA9IHN1bnJpc2UuZ2V0TWludXRlcygpO1xyXG4gICAgaWYgKG1pbnV0ZXMgPCAxMCkge1xyXG4gICAgICAgIG1pbnV0ZXMgPSBcIjBcIiArIG1pbnV0ZXM7XHJcbiAgICB9XHJcbiAgICBsZXQgeWVhciA9IHN1bnJpc2UuZ2V0RnVsbFllYXIoKTtcclxuICAgIHN1bnJpc2UgPSBtb250aCArIFwiL1wiICsgZGF5ICsgXCIvXCIgKyB5ZWFyICsgXCIgIFwiICsgaG91cnMgKyBcIjpcIiArIG1pbnV0ZXM7XHJcbiAgICBtb250aCA9IHN1bnNldC5nZXRNb250aCgpICsgMTtcclxuICAgIGlmIChtb250aCA8IDEwKSB7XHJcbiAgICAgICAgbW9udGggPSBcIjBcIiArIG1vbnRoO1xyXG4gICAgfVxyXG4gICAgZGF5ID0gc3Vuc2V0LmdldERhdGUoKTtcclxuICAgIGlmIChkYXkgPCAxMCkge1xyXG4gICAgICAgIGRheSA9IFwiMFwiICsgZGF5O1xyXG4gICAgfVxyXG4gICAgaG91cnMgPSBzdW5zZXQuZ2V0SG91cnMoKTtcclxuICAgIG1pbnV0ZXMgPSBzdW5zZXQuZ2V0TWludXRlcygpO1xyXG4gICAgaWYgKG1pbnV0ZXMgPCAxMCkge1xyXG4gICAgICAgIG1pbnV0ZXMgPSBcIjBcIiArIG1pbnV0ZXM7XHJcbiAgICB9XHJcbiAgICB5ZWFyID0gc3Vuc2V0LmdldEZ1bGxZZWFyKCk7XHJcbiAgICBzdW5zZXQgPSBtb250aCArIFwiL1wiICsgZGF5ICsgXCIvXCIgKyB5ZWFyICsgXCIgIFwiICsgaG91cnMgKyBcIjpcIiArIG1pbnV0ZXM7XHJcbiAgICBjdXJyZW50VGVtcCAtPSAyNzMuMTU7XHJcbiAgICBsb3dUZW1wIC09IDI3My4xNTtcclxuICAgIGhpZ2hUZW1wIC09IDI3My4xNTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGlzcGxheURhdGEoKSB7XHJcblxyXG4gICAgbGV0IGNvZGUgPSB4bWxPYmplY3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ3ZWF0aGVyXCIpWzBdLmdldEF0dHJpYnV0ZShcIm51bWJlclwiKTtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJpbmZvX19pY29uXCIpWzBdLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cIndpIHdpLW93bS0ke2NvZGV9XCI+PC9pPmA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaW5mb19fY29uZGl0aW9uc1wiKVswXS5pbm5lckhUTUwgPSBjb25kaXRpb25zO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImluZm9fX2NpdHlcIilbMF0uaW5uZXJIVE1MID0gbGlzdEl0ZW07XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fc3VuX19yaXNlXCIpWzBdLmlubmVySFRNTCA9IGA8aSBjbGFzcz1cIndpIHdpLXN1bnJpc2VcIj48L2k+Jm5ic3A7JHtzdW5yaXNlfWA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fc3VuX19zZXRcIilbMF0uaW5uZXJIVE1MID0gYDxpIGNsYXNzPVwid2kgd2ktc3Vuc2V0XCI+PC9pPiZuYnNwOyR7c3Vuc2V0fWA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fdGVtcF9fY3VycmVudFwiKVswXS5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKGN1cnJlbnRUZW1wKX08aSBjbGFzcz1cIndpIHdpLWNlbHNpdXNcIj48L2k+Jm5ic3A7Jm5ic3A7Q3VycmVudGA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fdGVtcF9fbG93XCIpWzBdLmlubmVySFRNTCA9IGAke01hdGgucm91bmQobG93VGVtcCl9PGkgY2xhc3M9XCJ3aSB3aS1jZWxzaXVzXCI+PC9pPiZuYnNwOyZuYnNwO0xvd2A7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fdGVtcF9faGlnaFwiKVswXS5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKGhpZ2hUZW1wKX08aSBjbGFzcz1cIndpIHdpLWNlbHNpdXNcIj48L2k+Jm5ic3A7Jm5ic3A7SGlnaGA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9faHVtaWRpdHlfX3ZhbHVlXCIpWzBdLmlubmVySFRNTCA9IGAke2h1bWlkaXR5fSAlYDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ3ZWF0aGVyX19wcmVzc3VyZV9fdmFsdWVcIilbMF0uaW5uZXJIVE1MID0gYCR7cHJlc3N1cmV9IGhQYWA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fd2luZF9faWNvblwiKVswXS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJ3aSB3aS13aW5kIHRvd2FyZHMtJHt3aW5kRGlyZWN0aW9uQ29kZX0tZGVnXCI+PC9pPjxiPiZuYnNwOyZuYnNwO1dpbmQ8L2I+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJ3ZWF0aGVyX193aW5kX19kaXJlY3Rpb25cIilbMF0uaW5uZXJIVE1MID0gYCR7d2luZERpcmVjdGlvbn0gd2luZGA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlcl9fd2luZF9fc3RyZW5ndGhcIilbMF0uaW5uZXJIVE1MID0gd2luZFN0cmVuZ3RoO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIndlYXRoZXJfX3dpbmRfX3NwZWVkXCIpWzBdLmlubmVySFRNTCA9IGAke3dpbmRTcGVlZH0ga20vaCBzcGVlZGA7XHJcbiAgIFxyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGV2ZW50IGhhbmRsZXJzXHJcbmZ1bmN0aW9uIG9uQ2l0eURhdGFMb2FkZWQocmVzdWx0KSB7XHJcblxyXG4gICAgLy8gZ3JhYiB0aGUgWE1MIHJlc3BvbnNlXHJcbiAgICB4bWxPYmplY3QgPSByZXN1bHQ7XHJcbiAgICBsb2FkaW5nT3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlclwiKVswXS5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndlYXRoZXJcIikuc3R5bGUub3BhY2l0eSA9IDE7XHJcblxyXG4gICAgZ2V0V2VhdGhlckRhdGEoKTtcclxuICAgIGNvbnZlcnRXZWF0aGVyRGF0YSgpO1xyXG4gICAgZGlzcGxheURhdGEoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25Mb2FkZWQocmVzdWx0KSB7ICBcclxuICAgIC8vIGdyYWIgdGhlIFhNTCByZXNwb25zZVxyXG4gICAgeG1sT2JqZWN0ID0gcmVzdWx0O1xyXG4gXHJcbiAgICBjaXRpZXNDb3VudCA9IHhtbE9iamVjdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImNpdHlcIikubGVuZ3RoO1xyXG4gICAgaWYgKGNpdGllc0NvdW50ID4gMCkge1xyXG4gICAgICAgIHBvcHVsYXRlTWUoKTtcclxuICAgICAgICBsaXN0SXRlbSA9IGNvb2tpZU1hbmFnZXIucmV0cmlldmVDb29raWUoXCJsYXN0Q2l0eVwiKTtcclxuICAgICAgICBpZiAobGlzdEl0ZW0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNpdGllcy52YWx1ZSA9IGxpc3RJdGVtO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIHJldHJpZXZlOiBcIiArIGxpc3RJdGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uQ2hhbmdlZCgpO1xyXG4gICAgICAgIGxvYWRpbmdPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gb25DaXR5Tm90Rm91bmQoZSkge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImluZm9fX2NpdHlcIilbMF0uaW5uZXJIVE1MID0gXCJDaXR5IG5vdCBmb3VuZFwiLmZvbnRjb2xvcihcInJlZFwiKS5pdGFsaWNzKCk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwid2VhdGhlclwiKVswXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uRXJyb3IoZSkge1xyXG4gICAgY29uc29sZS5sb2coXCIqKiogRXJyb3IgaGFzIG9jY3VyZWQgZHVyaW5nIEFKQVggZGF0YSByZXRyaWV2YWxcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uQ2hhbmdlZChlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcImluIG9uQ2hhbmdlZDogXCIgKyBsaXN0SXRlbSk7XHJcblxyXG4gICAgLy8gcmVmZXJlbmNlIHRvIG9wdGlvbiBpbiBjaXRpZXNcclxuICAgIGxpc3RJdGVtID0gY2l0aWVzLnNlbGVjdGVkT3B0aW9uc1swXTtcclxuICAgIGNvbnNvbGUubG9nKFwiaW4gb25DaGFuZ2VkIHRleHRDb250ZW50OiBcIiArIGxpc3RJdGVtLnRleHRDb250ZW50KTtcclxuICAgIGxhc3RDaXR5ID0gbGlzdEl0ZW0udGV4dENvbnRlbnQ7XHJcbiAgICBsaXN0SXRlbSA9IGxhc3RDaXR5O1xyXG4gICAgc2F2ZURhdGEoKTtcclxuXHJcblxyXG4gICAgbGV0IGNpdHlTcGxpdCA9IGxpc3RJdGVtLnNwbGl0KFwiLFwiKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGxpc3RJdGVtLnRleHRDb250ZW50KTtcclxuICAgIGNvbnNvbGUubG9nKGNpdHlTcGxpdFswXSk7XHJcbiAgICByZXRyaWV2ZVNjcmlwdCA9IGBodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP3E9JHtjaXR5U3BsaXRbMF19LENBJm1vZGU9eG1sJmFwcGlkPTY3NjFhZmIxNDY4Y2UyZmVjOWMwYjNjNjdlZTM3YWEyYDtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2VhdGhlclwiKS5zdHlsZS5vcGFjaXR5ID0gMC4yO1xyXG5cclxuICAgIGdldFhNTERhdGEocmV0cmlldmVTY3JpcHQsIG9uQ2l0eURhdGFMb2FkZWQsIG9uQ2l0eU5vdEZvdW5kKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZURhdGEoKSB7XHJcbiAgICAvLyB3cml0ZSBjdXJyZW50IHdvbiBhbmQgbG9zdCBjb3VudCB0byBjb29raWUgZm9yIGZ1dHVyZSBnYW1lc1xyXG4gICAgY29va2llTWFuYWdlci5zZXR1cENvb2tpZShcImxhc3RDaXR5XCIsIGxhc3RDaXR5LCAzNjUpO1xyXG4gICAgLy8gY29va2llTWFuYWdlci5zZXR1cENvb2tpZShcImxvc3RzXCIsIGxvc3QsIDM2NSk7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcHJpdmF0ZSBtZXRob2RzXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcblxyXG4gICAgLy8gY29uc3RydWN0IGNvb2tpZU1hbmFnZXJcclxuICAgIGNvb2tpZU1hbmFnZXIgPSBuZXcgQ29va2llTWFuYWdlcigpO1xyXG5cclxuXHJcblxyXG4gICAgLy8gc2V0dXAgcmVmZXJlbmNlcyB0byBjb250cm9sc1xyXG4gICAgcmV0cmlldmVTY3JpcHQgPSBcImNpdGllcy54bWxcIjtcclxuICAgIGNpdGllcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2l0aWVzXCIpO1xyXG4gICAgbG9hZGluZ092ZXJsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwibG9hZGluZy1vdmVybGF5XCIpWzBdO1xyXG5cclxuICAgIC8vIHNlbmQgb3V0IEFKQVggcmVxdWVzdFxyXG4gICAgZ2V0WE1MRGF0YShyZXRyaWV2ZVNjcmlwdCwgb25Mb2FkZWQsIG9uRXJyb3IpO1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG59XHJcblxyXG5tYWluKCk7Il19"}